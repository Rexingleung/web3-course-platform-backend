import { initializeDatabase, getConnection } from './connection';\n\nasync function seedDatabase() {\n  try {\n    await initializeDatabase();\n    const db = getConnection();\n\n    console.log('Seeding database with test data...');\n\n    // Insert sample courses\n    const sampleCourses = [\n      {\n        course_id: 1,\n        title: 'Web3 开发入门',\n        description: '学习区块链和智能合约开发的基础知识，包括 Solidity、ethers.js 等技术栈。',\n        author: '0x742d35Cc6634C0532925a3b8D65aEd2934C12D5e',\n        price: '100000000000000000', // 0.1 ETH in wei\n        created_at: Math.floor(Date.now() / 1000)\n      },\n      {\n        course_id: 2,\n        title: 'DeFi 协议深度解析',\n        description: '深入了解去中心化金融协议的工作原理，学习如何构建 DeFi 应用。',\n        author: '0x8ba1f109551bD432803012645Hac136c4c5F5Cf5',\n        price: '200000000000000000', // 0.2 ETH in wei\n        created_at: Math.floor(Date.now() / 1000) - 86400\n      },\n      {\n        course_id: 3,\n        title: 'NFT 市场开发实战',\n        description: '从零开始构建一个完整的 NFT 交易市场，包括智能合约和前端界面。',\n        author: '0x742d35Cc6634C0532925a3b8D65aEd2934C12D5e',\n        price: '150000000000000000', // 0.15 ETH in wei\n        created_at: Math.floor(Date.now() / 1000) - 172800\n      },\n      {\n        course_id: 4,\n        title: 'Solidity 高级编程技巧',\n        description: '掌握 Solidity 的高级特性，包括优化技巧、安全最佳实践和复杂合约设计。',\n        author: '0x9fE46736679d2D9a65F0992F2272de9f3c7fa6e0',\n        price: '250000000000000000', // 0.25 ETH in wei\n        created_at: Math.floor(Date.now() / 1000) - 259200\n      },\n      {\n        course_id: 5,\n        title: 'Layer 2 扩容方案详解',\n        description: '了解各种 Layer 2 扩容解决方案，包括 Polygon、Arbitrum、Optimism 等。',\n        author: '0x8ba1f109551bD432803012645Hac136c4c5F5Cf5',\n        price: '180000000000000000', // 0.18 ETH in wei\n        created_at: Math.floor(Date.now() / 1000) - 345600\n      }\n    ];\n\n    for (const course of sampleCourses) {\n      await db.execute(\n        `INSERT IGNORE INTO courses (course_id, title, description, author, price, created_at) \n         VALUES (?, ?, ?, ?, ?, ?)`,\n        [course.course_id, course.title, course.description, course.author, course.price, course.created_at]\n      );\n    }\n\n    // Insert sample purchases\n    const samplePurchases = [\n      {\n        course_id: 1,\n        buyer: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n        price: '100000000000000000',\n        transaction_hash: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'\n      },\n      {\n        course_id: 2,\n        buyer: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n        price: '200000000000000000',\n        transaction_hash: '0x2345678901abcdef2345678901abcdef2345678901abcdef2345678901abcdef'\n      },\n      {\n        course_id: 3,\n        buyer: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',\n        price: '150000000000000000',\n        transaction_hash: '0x3456789012abcdef3456789012abcdef3456789012abcdef3456789012abcdef'\n      }\n    ];\n\n    for (const purchase of samplePurchases) {\n      await db.execute(\n        `INSERT IGNORE INTO purchases (course_id, buyer, price, transaction_hash) \n         VALUES (?, ?, ?, ?)`,\n        [purchase.course_id, purchase.buyer, purchase.price, purchase.transaction_hash]\n      );\n    }\n\n    console.log('Database seeded successfully with:');\n    console.log(`- ${sampleCourses.length} sample courses`);\n    console.log(`- ${samplePurchases.length} sample purchases`);\n    console.log('\\nYou can now test the API endpoints!');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('Seeding failed:', error);\n    process.exit(1);\n  }\n}\n\nseedDatabase();"