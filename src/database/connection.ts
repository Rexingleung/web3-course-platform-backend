import mysql from 'mysql2/promise';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst config = {\n  host: process.env.DB_HOST || 'localhost',\n  user: process.env.DB_USER || 'root',\n  password: process.env.DB_PASSWORD || '&*&Ddasd123.ii2',\n  database: process.env.DB_NAME || 'web3',\n};\n\nlet connection: mysql.Connection | null = null;\n\nexport async function initializeDatabase() {\n  try {\n    // Create connection to MySQL server first (without database)\n    const serverConnection = await mysql.createConnection({\n      host: config.host,\n      user: config.user,\n      password: config.password,\n    });\n\n    // Create database if it doesn't exist\n    await serverConnection.execute(`CREATE DATABASE IF NOT EXISTS ${config.database}`);\n    await serverConnection.end();\n\n    // Now connect to the specific database\n    connection = await mysql.createConnection(config);\n    console.log('Connected to MySQL database:', config.database);\n    \n    // Create tables if they don't exist\n    await createTables();\n  } catch (error) {\n    console.error('Database connection failed:', error);\n    throw error;\n  }\n}\n\nasync function createTables() {\n  if (!connection) {\n    throw new Error('Database connection not established');\n  }\n\n  const createCoursesTable = `\n    CREATE TABLE IF NOT EXISTS courses (\n      id INT AUTO_INCREMENT PRIMARY KEY,\n      course_id INT UNIQUE NOT NULL,\n      title VARCHAR(255) NOT NULL,\n      description TEXT,\n      author VARCHAR(42) NOT NULL,\n      price DECIMAL(20, 0) NOT NULL,\n      created_at BIGINT NOT NULL,\n      updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n      INDEX idx_course_id (course_id),\n      INDEX idx_author (author)\n    )\n  `;\n\n  const createPurchasesTable = `\n    CREATE TABLE IF NOT EXISTS purchases (\n      id INT AUTO_INCREMENT PRIMARY KEY,\n      course_id INT NOT NULL,\n      buyer VARCHAR(42) NOT NULL,\n      price DECIMAL(20, 0) NOT NULL,\n      transaction_hash VARCHAR(66),\n      purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n      INDEX idx_course_buyer (course_id, buyer),\n      INDEX idx_buyer (buyer)\n    )\n  `;\n\n  try {\n    await connection.execute(createCoursesTable);\n    await connection.execute(createPurchasesTable);\n    console.log('Database tables created/verified');\n  } catch (error) {\n    console.error('Failed to create tables:', error);\n    throw error;\n  }\n}\n\nexport function getConnection() {\n  if (!connection) {\n    throw new Error('Database not initialized. Please call initializeDatabase() first.');\n  }\n  return connection;\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  if (connection) {\n    await connection.end();\n    console.log('Database connection closed.');\n  }\n  process.exit(0);\n});"